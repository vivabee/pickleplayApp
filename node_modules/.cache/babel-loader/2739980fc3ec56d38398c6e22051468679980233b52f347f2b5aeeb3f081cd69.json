{"ast":null,"code":"import { collection, getDocs, getDoc, doc } from 'firebase/firestore';\nimport { auth, db } from './config';\nimport { signOut } from \"firebase/auth\"; // Import the signOut function from \"firebase/auth\"\n\nexport async function load() {\n  try {\n    if (!auth.currentUser) return [];\n    const querySnapshot = await getDocs(collection(db, 'session'));\n    return processQuerySnapshot(querySnapshot);\n  } catch (error) {\n    console.error('Failed to load user sessions:', error);\n    throw new Error('Failed to load user sessions');\n  }\n}\nasync function processQuerySnapshot(querySnapshot) {\n  const data = [];\n\n  // Iterate over each session document\n  for (const doc of querySnapshot.docs) {\n    // Extract session data\n    const sessionData = {\n      id: doc.id,\n      ...doc.data()\n    };\n\n    // Include player data if available\n    if (sessionData.players) {\n      // Fetch player data from the database based on player IDs\n      const playerData = await fetchPlayerData(sessionData.players);\n      // Add player data to the session object\n      sessionData.players = playerData;\n    }\n    data.push(sessionData);\n  }\n  return data;\n}\nasync function fetchPlayerData(playerIds) {\n  const playerData = [];\n\n  // Fetch player documents from the database based on player IDs\n  for (const playerId of playerIds) {\n    const playerDoc = await getDoc(doc(db, 'players', playerId));\n    if (playerDoc.exists()) {\n      playerData.push(playerDoc.data());\n    }\n  }\n  return playerData;\n}\nexport async function logout() {\n  try {\n    await signOut(auth);\n    return true;\n  } catch (error) {\n    console.error(error);\n    throw new Error(`Failed: ${error.message}`);\n  }\n}\n\n// Function to load session data including players for a given session ID\nexport async function load2(sessionId) {\n  try {\n    // Fetch the session document based on session ID\n    const sessionDoc = await getDoc(doc(db, 'session', sessionId));\n    if (!sessionDoc.exists()) {\n      // Session document not found, return empty array\n      return [];\n    }\n\n    // Extract session data\n    const sessionData = {\n      id: sessionDoc.id,\n      ...sessionDoc.data()\n    };\n\n    // Include player data if available\n    if (sessionData.players) {\n      // Fetch player data from the database based on player IDs\n      const playerData = await fetchPlayerData(sessionData.players);\n      // Add player data to the session object\n      sessionData.players = playerData;\n    }\n    return [sessionData]; // Return session data in an array\n  } catch (error) {\n    console.error('Failed to load session data:', error);\n    throw new Error('Failed to load session data');\n  }\n}","map":{"version":3,"names":["collection","getDocs","getDoc","doc","auth","db","signOut","load","currentUser","querySnapshot","processQuerySnapshot","error","console","Error","data","docs","sessionData","id","players","playerData","fetchPlayerData","push","playerIds","playerId","playerDoc","exists","logout","message","load2","sessionId","sessionDoc"],"sources":["C:/Users/vsvil/OneDrive/FANSHAWE FILES/Winter 2024/FullStack/VivaArroyo-LocalRepo1/pickleplayApp/src/database/read.js"],"sourcesContent":["import { collection, getDocs, getDoc, doc } from 'firebase/firestore';\r\nimport { auth, db } from './config';\r\nimport { signOut } from \"firebase/auth\"; // Import the signOut function from \"firebase/auth\"\r\n\r\nexport async function load() {\r\n  try {\r\n    if (!auth.currentUser) return [];\r\n\r\n    const querySnapshot = await getDocs(collection(db, 'session'));\r\n    return processQuerySnapshot(querySnapshot);\r\n  } catch (error) {\r\n    console.error('Failed to load user sessions:', error);\r\n    throw new Error('Failed to load user sessions');\r\n  }\r\n}\r\nasync function processQuerySnapshot(querySnapshot) {\r\n  const data = [];\r\n\r\n  // Iterate over each session document\r\n  for (const doc of querySnapshot.docs) {\r\n    // Extract session data\r\n    const sessionData = {\r\n      id: doc.id,\r\n      ...doc.data(),\r\n    };\r\n\r\n    // Include player data if available\r\n    if (sessionData.players) {\r\n      // Fetch player data from the database based on player IDs\r\n      const playerData = await fetchPlayerData(sessionData.players);\r\n      // Add player data to the session object\r\n      sessionData.players = playerData;\r\n    }\r\n\r\n    data.push(sessionData);\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nasync function fetchPlayerData(playerIds) {\r\n  const playerData = [];\r\n\r\n  // Fetch player documents from the database based on player IDs\r\n  for (const playerId of playerIds) {\r\n    const playerDoc = await getDoc(doc(db, 'players', playerId));\r\n    if (playerDoc.exists()) {\r\n      playerData.push(playerDoc.data());\r\n    }\r\n  }\r\n\r\n  return playerData;\r\n}\r\n\r\nexport async function logout() { \r\n  try {\r\n      await signOut(auth); \r\n      return true;\r\n  }\r\n  catch (error) {\r\n      console.error(error);\r\n      throw new Error(`Failed: ${error.message}`); \r\n    \r\n  }\r\n}\r\n\r\n\r\n// Function to load session data including players for a given session ID\r\nexport async function load2(sessionId) {\r\n  try {\r\n    // Fetch the session document based on session ID\r\n    const sessionDoc = await getDoc(doc(db, 'session', sessionId));\r\n    \r\n    if (!sessionDoc.exists()) {\r\n      // Session document not found, return empty array\r\n      return [];\r\n    }\r\n\r\n    // Extract session data\r\n    const sessionData = {\r\n      id: sessionDoc.id,\r\n      ...sessionDoc.data(),\r\n    };\r\n\r\n    // Include player data if available\r\n    if (sessionData.players) {\r\n      // Fetch player data from the database based on player IDs\r\n      const playerData = await fetchPlayerData(sessionData.players);\r\n      // Add player data to the session object\r\n      sessionData.players = playerData;\r\n    }\r\n\r\n    return [sessionData]; // Return session data in an array\r\n  } catch (error) {\r\n    console.error('Failed to load session data:', error);\r\n    throw new Error('Failed to load session data');\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}