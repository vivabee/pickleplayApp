{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vsvil\\\\OneDrive\\\\FANSHAWE FILES\\\\Winter 2024\\\\FullStack\\\\VivaArroyo-LocalRepo1\\\\pickleplayApp\\\\src\\\\components\\\\Forms\\\\Addplayer\\\\index.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\nexport default function AddPlayer() {\r\n  const { sessionId } = useParams(); // Access sessionId from URL parameters\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        // Load the session data\r\n        const sessions = await database.load();\r\n        // Find the session with the matching sessionId\r\n        const session = sessions.find(session => session.id === sessionId);\r\n        if (session) {\r\n          // Set the players from the session data\r\n          setPlayers(session.players || []); // Use empty array if players field is undefined\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]); // Fetch players whenever sessionId changes\r\n\r\n\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      // Call the save function to update the session with the new players\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = (index) => {\r\n    const updatedPlayers = [...players];\r\n    updatedPlayers.splice(index, 1);\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addplayer-container\" >\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n          placeholder=\"Enter player name\"\r\n        />\r\n        <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n          Add Player\r\n        </button>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul>\r\n          {players.map((player, index) => (\r\n            <li key={index}>\r\n              {player}\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div>Document ID: {sessionId}</div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport * as database from '../../../database';\nimport \"./addplayer.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddPlayer() {\n  _s();\n  const {\n    sessionId\n  } = useParams(); // Access sessionId from URL parameters\n  const [players, setPlayers] = useState([]);\n  const [playerName, setPlayerName] = useState(\"\");\n  const maxPlayers = 4;\n  const minPlayers = 2;\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        const sessionData = await database.load2(sessionId); // Load session data including players for the given sessionId\n        if (sessionData.length > 0) {\n          // Set the players from the session data\n          setPlayers(sessionData[0].players || []); // Use empty array if players field is undefined\n        }\n      } catch (error) {\n        console.error('Error loading players:', error);\n      }\n    };\n    fetchPlayers();\n  }, [sessionId]); // Fetch players whenever sessionId changes\n\n  const handleAddPlayer = async () => {\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\n      const updatedPlayers = [...players, playerName.trim()];\n      setPlayers(updatedPlayers);\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\n      if (!isUpdated) {\n        console.error('Failed to update session with players');\n      }\n      setPlayerName(\"\");\n    }\n  };\n  const handleRemovePlayer = index => {\n    const updatedPlayers = [...players];\n    updatedPlayers.splice(index, 1);\n    setPlayers(updatedPlayers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addplayer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: playerName,\n        onChange: e => setPlayerName(e.target.value),\n        placeholder: \"Enter player name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddPlayer,\n        disabled: players.length >= maxPlayers,\n        children: \"Add Player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), players.length < minPlayers && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Please add at least \", minPlayers - players.length, \" more player(s).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [player, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemovePlayer(index),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Document ID: \", sessionId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(AddPlayer, \"VEUUIuMXBHenQUHT1wArJ+nGKHM=\", false, function () {\n  return [useParams];\n});\n_c = AddPlayer;\nvar _c;\n$RefreshReg$(_c, \"AddPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useParams","database","jsxDEV","_jsxDEV","AddPlayer","_s","sessionId","players","setPlayers","playerName","setPlayerName","maxPlayers","minPlayers","fetchPlayers","sessionData","load2","length","error","console","handleAddPlayer","trim","updatedPlayers","isUpdated","save2","handleRemovePlayer","index","splice","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","player","_c","$RefreshReg$"],"sources":["C:/Users/vsvil/OneDrive/FANSHAWE FILES/Winter 2024/FullStack/VivaArroyo-LocalRepo1/pickleplayApp/src/components/Forms/Addplayer/index.js"],"sourcesContent":["/* import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\nexport default function AddPlayer() {\r\n  const { sessionId } = useParams(); // Access sessionId from URL parameters\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        // Load the session data\r\n        const sessions = await database.load();\r\n        // Find the session with the matching sessionId\r\n        const session = sessions.find(session => session.id === sessionId);\r\n        if (session) {\r\n          // Set the players from the session data\r\n          setPlayers(session.players || []); // Use empty array if players field is undefined\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]); // Fetch players whenever sessionId changes\r\n\r\n\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      // Call the save function to update the session with the new players\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = (index) => {\r\n    const updatedPlayers = [...players];\r\n    updatedPlayers.splice(index, 1);\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addplayer-container\" >\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n          placeholder=\"Enter player name\"\r\n        />\r\n        <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n          Add Player\r\n        </button>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul>\r\n          {players.map((player, index) => (\r\n            <li key={index}>\r\n              {player}\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div>Document ID: {sessionId}</div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\n\r\nexport default function AddPlayer() {\r\n  const { sessionId } = useParams(); // Access sessionId from URL parameters\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        const sessionData = await database.load2(sessionId); // Load session data including players for the given sessionId\r\n        if (sessionData.length > 0) {\r\n          // Set the players from the session data\r\n          setPlayers(sessionData[0].players || []); // Use empty array if players field is undefined\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]); // Fetch players whenever sessionId changes\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = (index) => {\r\n    const updatedPlayers = [...players];\r\n    updatedPlayers.splice(index, 1);\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addplayer-container\">\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n          placeholder=\"Enter player name\"\r\n        />\r\n        <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n          Add Player\r\n        </button>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul>\r\n          {players.map((player, index) => (\r\n            <li key={index}>\r\n              {player}\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div>Document ID: {sessionId}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,KAAKC,QAAQ,MAAM,mBAAmB;AAC7C,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAU,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EACnC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMa,UAAU,GAAG,CAAC;EACpB,MAAMC,UAAU,GAAG,CAAC;EAEpBb,SAAS,CAAC,MAAM;IACd,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,WAAW,GAAG,MAAMb,QAAQ,CAACc,KAAK,CAACT,SAAS,CAAC,CAAC,CAAC;QACrD,IAAIQ,WAAW,CAACE,MAAM,GAAG,CAAC,EAAE;UAC1B;UACAR,UAAU,CAACM,WAAW,CAAC,CAAC,CAAC,CAACP,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDJ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACP,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,MAAMa,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIV,UAAU,CAACW,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIb,OAAO,CAACS,MAAM,GAAGL,UAAU,EAAE;MAC3D,MAAMU,cAAc,GAAG,CAAC,GAAGd,OAAO,EAAEE,UAAU,CAACW,IAAI,CAAC,CAAC,CAAC;MACtDZ,UAAU,CAACa,cAAc,CAAC;MAC1B,MAAMC,SAAS,GAAG,MAAMrB,QAAQ,CAACsB,KAAK,CAACd,UAAU,CAACW,IAAI,CAAC,CAAC,EAAEd,SAAS,CAAC;MACpE,IAAI,CAACgB,SAAS,EAAE;QACdJ,OAAO,CAACD,KAAK,CAAC,uCAAuC,CAAC;MACxD;MACAP,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;EAED,MAAMc,kBAAkB,GAAIC,KAAK,IAAK;IACpC,MAAMJ,cAAc,GAAG,CAAC,GAAGd,OAAO,CAAC;IACnCc,cAAc,CAACK,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IAC/BjB,UAAU,CAACa,cAAc,CAAC;EAC5B,CAAC;EAED,oBACElB,OAAA;IAAKwB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAClCzB,OAAA;MAAAyB,QAAA,gBACEzB,OAAA;QACE0B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAErB,UAAW;QAClBsB,QAAQ,EAAGC,CAAC,IAAKtB,aAAa,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,WAAW,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACFnC,OAAA;QAAQoC,OAAO,EAAEpB,eAAgB;QAACqB,QAAQ,EAAEjC,OAAO,CAACS,MAAM,IAAIL,UAAW;QAAAiB,QAAA,EAAC;MAE1E;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACR/B,OAAO,CAACS,MAAM,GAAGJ,UAAU,iBAC1BT,OAAA;QAAAyB,QAAA,GAAG,sBAAoB,EAAChB,UAAU,GAAGL,OAAO,CAACS,MAAM,EAAC,kBAAgB;MAAA;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACxE,eACDnC,OAAA;QAAAyB,QAAA,EACGrB,OAAO,CAACkC,GAAG,CAAC,CAACC,MAAM,EAAEjB,KAAK,kBACzBtB,OAAA;UAAAyB,QAAA,GACGc,MAAM,eACPvC,OAAA;YAAQoC,OAAO,EAAEA,CAAA,KAAMf,kBAAkB,CAACC,KAAK,CAAE;YAAAG,QAAA,EAAC;UAAM;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAF1Db,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLnC,OAAA;QAAAyB,QAAA,GAAK,eAAa,EAACtB,SAAS;MAAA;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjC,EAAA,CApEuBD,SAAS;EAAA,QACTJ,SAAS;AAAA;AAAA2C,EAAA,GADTvC,SAAS;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}