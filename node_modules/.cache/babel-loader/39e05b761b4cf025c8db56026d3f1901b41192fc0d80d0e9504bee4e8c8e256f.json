{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vsvil\\\\OneDrive\\\\FANSHAWE FILES\\\\Winter 2024\\\\FullStack\\\\VivaArroyo-LocalRepo1\\\\pickleplayApp\\\\src\\\\components\\\\Forms\\\\Addplayer\\\\index.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\nexport default function AddPlayer() {\r\n  const { sessionId } = useParams(); // Access sessionId from URL parameters\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        // Load the session data\r\n        const sessions = await database.load();\r\n        // Find the session with the matching sessionId\r\n        const session = sessions.find(session => session.id === sessionId);\r\n        if (session) {\r\n          // Set the players from the session data\r\n          setPlayers(session.players || []); // Use empty array if players field is undefined\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]); // Fetch players whenever sessionId changes\r\n\r\n\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      // Call the save function to update the session with the new players\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = (index) => {\r\n    const updatedPlayers = [...players];\r\n    updatedPlayers.splice(index, 1);\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addplayer-container\" >\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n          placeholder=\"Enter player name\"\r\n        />\r\n        <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n          Add Player\r\n        </button>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul>\r\n          {players.map((player, index) => (\r\n            <li key={index}>\r\n              {player}\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div>Document ID: {sessionId}</div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport * as database from '../../../database';\nimport \"./addplayer.scss\";\nimport playerImg from \"./playerImg.jpg\"; // Import the player image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddPlayer() {\n  _s();\n  const {\n    sessionId\n  } = useParams(); // Access sessionId from URL parameters\n  const [players, setPlayers] = useState([]);\n  const [playerName, setPlayerName] = useState(\"\");\n  const maxPlayers = 4;\n  const minPlayers = 2;\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        const sessions = await database.load();\n        const session = sessions.find(session => session.id === sessionId);\n        if (session) {\n          setPlayers(session.players || []);\n        }\n      } catch (error) {\n        console.error('Error loading players:', error);\n      }\n    };\n    fetchPlayers();\n  }, [sessionId]);\n  const handleAddPlayer = async () => {\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\n      const updatedPlayers = [...players, playerName.trim()];\n      setPlayers(updatedPlayers);\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\n      if (!isUpdated) {\n        console.error('Failed to update session with players');\n      }\n      setPlayerName(\"\");\n    }\n  };\n  const handleRemovePlayer = index => {\n    const updatedPlayers = [...players];\n    updatedPlayers.splice(index, 1);\n    setPlayers(updatedPlayers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addplayer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: playerName,\n        onChange: e => setPlayerName(e.target.value),\n        placeholder: \"Enter player name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddPlayer,\n        disabled: players.length >= maxPlayers,\n        children: \"Add Player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), players.length < minPlayers && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Please add at least \", minPlayers - players.length, \" more player(s).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [player, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemovePlayer(index),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"session-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"label\",\n          children: \"Players: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"value\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"player-list\",\n            children: players ? players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"player-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-info\",\n                children: player\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: playerImg,\n                alt: `${player} Avatar`,\n                className: \"player-avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Document ID: \", sessionId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(AddPlayer, \"VEUUIuMXBHenQUHT1wArJ+nGKHM=\", false, function () {\n  return [useParams];\n});\n_c = AddPlayer;\nvar _c;\n$RefreshReg$(_c, \"AddPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useParams","database","playerImg","jsxDEV","_jsxDEV","AddPlayer","_s","sessionId","players","setPlayers","playerName","setPlayerName","maxPlayers","minPlayers","fetchPlayers","sessions","load","session","find","id","error","console","handleAddPlayer","trim","length","updatedPlayers","isUpdated","save2","handleRemovePlayer","index","splice","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","player","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/vsvil/OneDrive/FANSHAWE FILES/Winter 2024/FullStack/VivaArroyo-LocalRepo1/pickleplayApp/src/components/Forms/Addplayer/index.js"],"sourcesContent":["/* import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\nexport default function AddPlayer() {\r\n  const { sessionId } = useParams(); // Access sessionId from URL parameters\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        // Load the session data\r\n        const sessions = await database.load();\r\n        // Find the session with the matching sessionId\r\n        const session = sessions.find(session => session.id === sessionId);\r\n        if (session) {\r\n          // Set the players from the session data\r\n          setPlayers(session.players || []); // Use empty array if players field is undefined\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]); // Fetch players whenever sessionId changes\r\n\r\n\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      // Call the save function to update the session with the new players\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = (index) => {\r\n    const updatedPlayers = [...players];\r\n    updatedPlayers.splice(index, 1);\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addplayer-container\" >\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n          placeholder=\"Enter player name\"\r\n        />\r\n        <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n          Add Player\r\n        </button>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul>\r\n          {players.map((player, index) => (\r\n            <li key={index}>\r\n              {player}\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div>Document ID: {sessionId}</div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\nimport playerImg from \"./playerImg.jpg\"; // Import the player image\r\n\r\nexport default function AddPlayer() {\r\n  const { sessionId } = useParams(); // Access sessionId from URL parameters\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        const sessions = await database.load();\r\n        const session = sessions.find(session => session.id === sessionId);\r\n        if (session) {\r\n          setPlayers(session.players || []);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]);\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = (index) => {\r\n    const updatedPlayers = [...players];\r\n    updatedPlayers.splice(index, 1);\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addplayer-container\">\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n          placeholder=\"Enter player name\"\r\n        />\r\n        <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n          Add Player\r\n        </button>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul>\r\n          {players.map((player, index) => (\r\n            <li key={index}>\r\n              {player}\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div className=\"session-info\">\r\n          <p className=\"label\">Players: </p>\r\n          <div className=\"value\">\r\n            <ul className=\"player-list\">\r\n              {players ? players.map((player, index) => (\r\n                <li key={index} className=\"player-item\">\r\n                  <div className=\"player-info\">\r\n                    {player}\r\n                  </div>\r\n                  <img src={playerImg} alt={`${player} Avatar`} className=\"player-avatar\" />\r\n                </li>\r\n              )) : null}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div>Document ID: {sessionId}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}