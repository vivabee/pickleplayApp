{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vsvil\\\\OneDrive\\\\FANSHAWE FILES\\\\Winter 2024\\\\FullStack\\\\VivaArroyo-LocalRepo1\\\\pickleplayApp\\\\src\\\\components\\\\Forms\\\\Addplayer\\\\index.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\nexport default function AddPlayer() {\r\n  const { sessionId } = useParams(); // Access sessionId from URL parameters\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        // Load the session data\r\n        const sessions = await database.load();\r\n        // Find the session with the matching sessionId\r\n        const session = sessions.find(session => session.id === sessionId);\r\n        if (session) {\r\n          // Set the players from the session data\r\n          setPlayers(session.players || []); // Use empty array if players field is undefined\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]); // Fetch players whenever sessionId changes\r\n\r\n\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      // Call the save function to update the session with the new players\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = (index) => {\r\n    const updatedPlayers = [...players];\r\n    updatedPlayers.splice(index, 1);\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addplayer-container\" >\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n          placeholder=\"Enter player name\"\r\n        />\r\n        <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n          Add Player\r\n        </button>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul>\r\n          {players.map((player, index) => (\r\n            <li key={index}>\r\n              {player}\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div>Document ID: {sessionId}</div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport * as database from '../../../database';\nimport \"./addplayer.scss\";\nimport playerImg from '../../assets/player1.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddPlayer() {\n  _s();\n  // Extract sessionId from the URL\n  const sessionId = window.location.pathname.split(\"/\").pop();\n  const [players, setPlayers] = useState([]);\n  const [playerName, setPlayerName] = useState(\"\");\n  const maxPlayers = 4;\n  const minPlayers = 2;\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        // Load session data based on sessionId\n        const session = await database.load2(sessionId); // Update to use load2 function with sessionId\n        // If session is found, set the players\n        if (session) {\n          setPlayers(session.players || []);\n        } else {\n          // Handle case where session is not found\n          console.error('Session not found for sessionId:', sessionId);\n        }\n      } catch (error) {\n        console.error('Error loading players:', error);\n      }\n    };\n    fetchPlayers();\n  }, [sessionId]);\n  const handleAddPlayer = async () => {\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\n      const updatedPlayers = [...players, playerName.trim()];\n      setPlayers(updatedPlayers);\n      // Call the save function to update the session with the new players\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\n      if (!isUpdated) {\n        console.error('Failed to update session with players');\n      }\n      setPlayerName(\"\");\n    }\n  };\n  const handleRemovePlayer = async index => {\n    try {\n      // Create a copy of the players array\n      const updatedPlayers = [...players];\n      // Remove the player at the specified index\n      updatedPlayers.splice(index, 1);\n      // Update the players array in the database using the save function\n      const isUpdated = await database.save(updatedPlayers, sessionId);\n      if (!isUpdated) {\n        console.error('Failed to update session with players');\n      }\n      // Update the local state\n      setPlayers(updatedPlayers);\n    } catch (error) {\n      console.error('Error removing player:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addplayer-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [players.length < minPlayers && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Please add at least \", minPlayers - players.length, \" more player(s).\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"player-list\",\n          children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"player-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: playerImg,\n                alt: \"Player\",\n                className: \"player-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"player-name\",\n                children: player\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRemovePlayer(index),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: playerName,\n        onChange: e => setPlayerName(e.target.value),\n        placeholder: \"Enter player name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddPlayer,\n        disabled: players.length >= maxPlayers,\n        children: \"Add Player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_s(AddPlayer, \"ugvLHaEv4NkvO5tJqRJeQF4qbRI=\");\n_c = AddPlayer;\nvar _c;\n$RefreshReg$(_c, \"AddPlayer\");","map":{"version":3,"names":["React","useState","useEffect","database","playerImg","jsxDEV","_jsxDEV","Fragment","_Fragment","AddPlayer","_s","sessionId","window","location","pathname","split","pop","players","setPlayers","playerName","setPlayerName","maxPlayers","minPlayers","fetchPlayers","session","load2","console","error","handleAddPlayer","trim","length","updatedPlayers","isUpdated","save2","handleRemovePlayer","index","splice","save","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","player","src","alt","onClick","type","value","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/vsvil/OneDrive/FANSHAWE FILES/Winter 2024/FullStack/VivaArroyo-LocalRepo1/pickleplayApp/src/components/Forms/Addplayer/index.js"],"sourcesContent":["/* import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\nexport default function AddPlayer() {\r\n  const { sessionId } = useParams(); // Access sessionId from URL parameters\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        // Load the session data\r\n        const sessions = await database.load();\r\n        // Find the session with the matching sessionId\r\n        const session = sessions.find(session => session.id === sessionId);\r\n        if (session) {\r\n          // Set the players from the session data\r\n          setPlayers(session.players || []); // Use empty array if players field is undefined\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]); // Fetch players whenever sessionId changes\r\n\r\n\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      // Call the save function to update the session with the new players\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = (index) => {\r\n    const updatedPlayers = [...players];\r\n    updatedPlayers.splice(index, 1);\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"addplayer-container\" >\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={playerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n          placeholder=\"Enter player name\"\r\n        />\r\n        <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n          Add Player\r\n        </button>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul>\r\n          {players.map((player, index) => (\r\n            <li key={index}>\r\n              {player}\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div>Document ID: {sessionId}</div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport * as database from '../../../database';\r\nimport \"./addplayer.scss\";\r\nimport playerImg from '../../assets/player1.png';\r\n\r\nexport default function AddPlayer() {\r\n  // Extract sessionId from the URL\r\n  const sessionId = window.location.pathname.split(\"/\").pop();\r\n\r\n  const [players, setPlayers] = useState([]);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const maxPlayers = 4;\r\n  const minPlayers = 2;\r\n\r\n  useEffect(() => {\r\n    const fetchPlayers = async () => {\r\n      try {\r\n        // Load session data based on sessionId\r\n        const session = await database.load2(sessionId); // Update to use load2 function with sessionId\r\n        // If session is found, set the players\r\n        if (session) {\r\n          setPlayers(session.players || []);\r\n        } else {\r\n          // Handle case where session is not found\r\n          console.error('Session not found for sessionId:', sessionId);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading players:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlayers();\r\n  }, [sessionId]);\r\n\r\n  const handleAddPlayer = async () => {\r\n    if (playerName.trim() !== \"\" && players.length < maxPlayers) {\r\n      const updatedPlayers = [...players, playerName.trim()];\r\n      setPlayers(updatedPlayers);\r\n      // Call the save function to update the session with the new players\r\n      const isUpdated = await database.save2(playerName.trim(), sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      setPlayerName(\"\");\r\n    }\r\n  };\r\n\r\n  const handleRemovePlayer = async (index) => {\r\n    try {\r\n      // Create a copy of the players array\r\n      const updatedPlayers = [...players];\r\n      // Remove the player at the specified index\r\n      updatedPlayers.splice(index, 1);\r\n      // Update the players array in the database using the save function\r\n      const isUpdated = await database.save(updatedPlayers, sessionId);\r\n      if (!isUpdated) {\r\n        console.error('Failed to update session with players');\r\n      }\r\n      // Update the local state\r\n      setPlayers(updatedPlayers);\r\n    } catch (error) {\r\n      console.error('Error removing player:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div className=\"addplayer-container\" >\r\n      <div>\r\n        {players.length < minPlayers && (\r\n          <p>Please add at least {minPlayers - players.length} more player(s).</p>\r\n        )}\r\n        <ul className=\"player-list\">\r\n          {players.map((player, index) => (\r\n            <li key={index} className=\"player-item\">\r\n              <div className=\"player-info\">\r\n                <img src={playerImg} alt=\"Player\" className=\"player-img\" /> {/* Image */}\r\n                <span className=\"player-name\">{player}</span>\r\n              </div>\r\n              <button onClick={() => handleRemovePlayer(index)}>Remove</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n          <div>\r\n          <input\r\n            type=\"text\"\r\n            value={playerName}\r\n            onChange={(e) => setPlayerName(e.target.value)}\r\n            placeholder=\"Enter player name\"\r\n          />\r\n          <button onClick={handleAddPlayer} disabled={players.length >= maxPlayers}>\r\n            Add Player\r\n          </button>\r\n          </div>\r\n          </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}